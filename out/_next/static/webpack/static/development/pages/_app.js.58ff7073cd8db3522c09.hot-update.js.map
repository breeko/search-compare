{"version":3,"file":"static/webpack/static/development/pages/_app.js.58ff7073cd8db3522c09.hot-update.js","sources":["webpack:///./pages/_app.tsx"],"sourcesContent":["import { Container } from \"@material-ui/core\"\nimport Head from \"next/head\"\nimport Router from \"next/router\"\nimport React, { useState } from \"react\"\nimport AppToolbar from \"../src/components/AppToolbar\"\nimport { AppContext } from \"../src/context/AppContext\"\nimport { getDdgResults, getGoogleResults } from \"../src/utils/api\"\n\nconst Layout: React.FunctionComponent = (props) => {\n  const [search, setSearch] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [googleResults, setGoogleResults] = useState<SearchResult[] | undefined>(undefined)\n  const [ddgResults, setDdgResults] = useState<SearchResult[] | undefined>(undefined)\n  const runSearch = (term: string) => {\n    if (term) {\n      if (Router.pathname !== \"/\") {\n        // TODO: Change to page and keep state!!\n        Router.push(\"/\").then(() => {setSearch(term); runSearch(term)})\n      } else {\n        setIsLoading(true)\n        setDdgResults(undefined)\n        setGoogleResults(undefined)\n        const g = getGoogleResults(term, 2).then(setGoogleResults)\n        const d = getDdgResults(term).then(setDdgResults)\n        Promise.all([g, d]).then(() => setIsLoading(false))\n      }\n    }\n  }\n  const { children } = this.props\n  return(\n    <AppContext.Provider value={{googleResults, ddgResults, setGoogleResults, setDdgResults,\n    search, setSearch, isLoading, setIsLoading, runSearch}}>\n      <Head>\n        <link rel=\"icon\" type=\"image/x-icon\" href=\"/public/static/favicon.ico\" />\n        <title>Search Compare</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n      </Head>\n      <AppToolbar/>\n      <Container maxWidth=\"lg\">\n        {[...children]}\n      </Container>\n    </AppContext.Provider>\n  )\n}\n\nexport default Layout\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AApBA;AAqBA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}